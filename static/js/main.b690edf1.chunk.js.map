{"version":3,"sources":["assets/logo.svg","Home.js","About.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","api","About","useState","query","setQuery","weather","setWeather","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","App","exact","to","activeClassName","render","location","TransitionGroup","CSSTransition","timeout","classNames","path","component","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b690edf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './assets/logo.svg';\n\nconst Home = () => {\n    return(\n        <div className=\"page\">\n            <section>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1>How to live better knowing what's ahead!!</h1>\n                <p>Welcome to HealthWeather App.</p>\n                <br/>\n                <br/>\n                Check out this first line\n                cipsum dolor sit, amet consectetur adipisicing elit. Deserunt, nesciunt minima? Dolores magni temporibus repellendus, at quod numquam blanditiis fuga rem eos molestias voluptatibus id odio, sed quam sint laboriosam officiis esse delectus rerum iste placeat fugit. Voluptas exercitationem velit saepe magni. Iusto veritatis magnam nisi enim placeat in animi at tenetur quisquam magni quia beatae corrupti quae omnis et autem incidunt sunt, dicta perferendis error? Inventore quos, culpa repellendus voluptas eveniet ea, quaerat eos quisquam nulla ipsam, impedit hic eaque cum magni? Praesentium pariatur ea est, amet labore totam maxime tempore dignissimos reprehenderit maiores impedit id. Consequatur, laudantium esse?\n                <br/><br/>\n                <h4>What this services offer</h4>\n                Lorem, ipsum dolor sit amet consectetur adipisicing elit. Natus recusandae soluta, enim temporibus sint adipisci corporis quis provident rem pariatur qui blanditiis nobis laborum officiis, aut omnis hic architecto molestiae, neque quidem expedita aliquid rerum. Distinctio recusandae, nam debitis facere quam ab porro! Autem rem explicabo, quis debitis fugiat sed, nam tempora quidem hic, fuga eos consequatur placeat? Saepe, suscipit temporibus. Doloribus voluptatibus repellat maxime! Explicabo a tempora rerum? Sequi.\n            </section>\n        </div>   \n    )\n}\n\nexport default Home;","// import React from 'react';\n// import logo from './assets/react-router-logo.png';\n\n// const About = () => {\n//     return(\n//         <div className=\"page\">\n//             <section>\n//                 <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//                 <h1>Use React Router and React Transition Group</h1>\n//                 <p>Alias laboriosam maiores autem nemo consectetur sed perspiciatis minus quibusdam dolorem ratione sapiente amet quia quis voluptates. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Earum culpa odio.</p>\n//             </section>\n//         </div>\n//     )\n// }\n\n\nimport React, { useState } from 'react';\nconst api = {\n    key: 'b96a8ca8eb77f4dc3d85d8f5cae00d42',\n    base: 'https://api.openweathermap.org/data/2.5/',\n}\n\nfunction About() {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n\n    const search = evt => {\n        if (evt.key === \"Enter\") {\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n                .then(res => res.json())\n                .then(result => {\n                    setWeather(result);\n                    setQuery('');\n                    console.log(result);\n                });\n        }\n    }\n\n    const dateBuilder = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n\n        return `${day} ${date} ${month} ${year}`\n    }\n\n    return (\n        <div className={\n            (typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? \"app warm\" : \"app\") : \"app\"\n        }>\n            <main>\n                <div className='search-box'>\n                    <input\n                        type='text'\n                        className='search-bar'\n                        placeholder='Find your Location..'\n                        onChange={e => setQuery(e.target.value)}\n                        value={query}\n                        onKeyPress={search}\n                    />\n                </div>\n                {(typeof weather.main != \"undefined\") ? (\n                    <div>\n                        <div className=\"location-box\">\n                            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                            <div className=\"date\">{dateBuilder(new Date())}</div>\n                        </div>\n                        <div className=\"weather-box\">\n                            <div className=\"temp\">\n                                {Math.round(weather.main.temp)}Â°C\n          </div>\n                            <div className=\"weather\">{weather.weather[0].main}</div>\n                        </div>\n                    </div>\n                ) : ('')}\n            </main>\n        </div>\n    );\n}\nexport default About;","import React, { Component } from 'react';\nimport {\n  Route,\n  NavLink,\n  Switch\n} from \"react-router-dom\";\nimport './App.css';\nimport Home from './Home';\nimport About from './About';\nimport {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\n\n// class component\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"nav\">\n          <NavLink exact to=\"/\" activeClassName=\"active\">Home</NavLink>\n          <div></div>\n          <NavLink to=\"/about\" activeClassName=\"active\">Know Weather?</NavLink>\n        </div>\n        <Route render={({location}) => (\n          <TransitionGroup>\n            <CSSTransition\n              key={location.key}\n              timeout={450}\n              classNames=\"fade\"\n            >\n              <Switch location={location}>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/about\" component={About} />\n              </Switch>\n            </CSSTransition>\n          </TransitionGroup>\n        )} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport './App.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Route path=\"/\" component={App} />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}